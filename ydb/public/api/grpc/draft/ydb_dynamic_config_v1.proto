syntax = "proto3";
option cc_enable_arenas = true;

package Ydb.DynamicConfig.V1;

option java_package = "com.yandex.ydb.dynamic_config.v1";

import "ydb/public/api/protos/draft/ydb_dynamic_config.proto";

service DynamicConfigService {
    // Apply new version of config.
    // Overwrites previous version.
    // This call is idempotent:
    //  - Two subsequent identical calls will return success,
    //  - After applying next version another identical call will result in an error.
    // The field version within the YAML in the request must strictly be set to the current version increment by one.
    // The field cluster within the YAML should be identical to the one configured on the node used by the console tablet.
    rpc SetConfig(DynamicConfig.SetConfigRequest) returns (DynamicConfig.SetConfigResponse);

    rpc ReplaceConfig(DynamicConfig.ReplaceConfigRequest) returns (DynamicConfig.ReplaceConfigResponse);

    // Get current configs metadata.
    rpc GetMetadata(DynamicConfig.GetMetadataRequest) returns (DynamicConfig.GetMetadataResponse);

    // Get current configs.
    rpc GetConfig(DynamicConfig.GetConfigRequest) returns (DynamicConfig.GetConfigResponse);

    // Drop current config.
    // This call is idempotent.
    rpc DropConfig(DynamicConfig.DropConfigRequest) returns (DynamicConfig.DropConfigResponse);
    rpc AddVolatileConfig(DynamicConfig.AddVolatileConfigRequest) returns (DynamicConfig.AddVolatileConfigResponse);
    rpc RemoveVolatileConfig(DynamicConfig.RemoveVolatileConfigRequest) returns (DynamicConfig.RemoveVolatileConfigResponse);

    rpc GetNodeLabels(DynamicConfig.GetNodeLabelsRequest) returns (DynamicConfig.GetNodeLabelsResponse);

    // Resolve config for particular labels.
    rpc ResolveConfig(DynamicConfig.ResolveConfigRequest) returns (DynamicConfig.ResolveConfigResponse);
    rpc ResolveAllConfig(DynamicConfig.ResolveAllConfigRequest) returns (DynamicConfig.ResolveAllConfigResponse);
}
